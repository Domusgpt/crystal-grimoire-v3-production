#!/bin/bash
set -e

echo "üîÆ Crystal Grimoire V3 - Modern Node.js Setup for Jules"

# Check what's actually available
echo "üìã Current Environment:"
node -v  # Jules probably has Node 18+ or 20+
npm -v
echo "Platform: $(uname -a)"

# Use current Node.js features
echo "üîß Setting up with modern Node.js..."

# Update to latest npm for better performance
npm install -g npm@latest

# Install global tools with current versions
npm install -g firebase-tools@latest

# Backend setup with modern dependencies
echo "üöÄ Setting up Firebase Functions with current versions..."
cd functions

# Update package.json to use current Node.js
cat > package.json << 'EOF'
{
  "name": "functions",
  "description": "Crystal Grimoire V3 Functions",
  "scripts": {
    "serve": "firebase emulators:start --only functions",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "20"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-functions": "^6.3.2",
    "firebase-admin": "^12.1.0",
    "@google/generative-ai": "^0.21.0",
    "cors": "^2.8.5",
    "express": "^4.21.1"
  },
  "private": true
}
EOF

# Fast, modern npm install
npm ci --prefer-offline --no-audit

cd ..

# Use modern JavaScript features in validation
echo "üß™ Modern JavaScript validation..."
node -e "
// Use modern ES features that work with current Node
const { readFileSync } = require('fs');
const { join } = require('path');

// Check package.json with modern syntax
try {
  const pkg = JSON.parse(readFileSync('functions/package.json', 'utf8'));
  console.log('‚úÖ Package.json valid');
  console.log('üì¶ Node version required:', pkg.engines?.node || 'not specified');
  
  // Check dependencies with modern object methods
  const deps = Object.keys(pkg.dependencies || {});
  console.log('üìö Dependencies:', deps.length, 'packages');
  
} catch (error) {
  console.error('‚ùå Package validation failed:', error.message);
  process.exit(1);
}

// Test modern JavaScript features
const testModern = () => {
  // Optional chaining (Node 14+)
  const config = { api: { version: '1.0' } };
  console.log('‚úÖ Optional chaining works:', config?.api?.version);
  
  // Nullish coalescing (Node 14+)
  const fallback = undefined ?? 'default';
  console.log('‚úÖ Nullish coalescing works:', fallback);
  
  // Promise.allSettled (Node 12.9+)
  Promise.allSettled([Promise.resolve('test')])
    .then(() => console.log('‚úÖ Modern Promise methods work'));
};

testModern();
"

# Test Firebase Functions with current features
echo "üî• Testing modern Firebase Functions..."
cd functions

# Test the actual functions code
node -e "
const functions = require('firebase-functions');
const admin = require('firebase-admin');

// Test with modern async/await patterns
async function testModern() {
  try {
    console.log('‚úÖ Firebase Functions loaded');
    console.log('üì¶ Functions SDK version:', functions.VERSION || 'unknown');
    
    // Test Gemini AI module
    const { GoogleGenerativeAI } = require('@google/generative-ai');
    console.log('‚úÖ Gemini AI module available');
    
    // Use modern features
    const config = {
      project: process.env.GCLOUD_PROJECT ?? 'test-project',
      region: process.env.FUNCTION_REGION ?? 'us-central1'
    };
    
    console.log('‚öôÔ∏è Config:', JSON.stringify(config, null, 2));
    
  } catch (error) {
    console.error('‚ùå Module test failed:', error.message);
    process.exit(1);
  }
}

testModern();
"

cd ..

# Performance check with modern Node
echo "‚ö° Performance check with current Node.js..."
node -e "
const { performance } = require('perf_hooks');
const start = performance.now();

// Simulate some work
const data = Array.from({ length: 1000 }, (_, i) => ({ id: i, value: Math.random() }));
const filtered = data.filter(item => item.value > 0.5);

const end = performance.now();
console.log('‚úÖ Performance test:', Math.round(end - start), 'ms for 1000 items');
console.log('üìä Modern Array methods work:', filtered.length, 'items filtered');
"

# Modern Firebase configuration
echo "üìù Creating modern Firebase config..."
cat > firebase.json << 'EOF'
{
  "functions": {
    "source": "functions",
    "runtime": "nodejs20",
    "ignore": [
      "node_modules",
      ".git",
      "firebase-debug.log",
      "firebase-debug.*.log"
    ]
  },
  "emulators": {
    "functions": {
      "port": 5001
    }
  }
}
EOF

# Final validation with current Node features
echo "üéØ Final validation with modern Node.js..."

# Check Node.js capabilities
node -e "
const nodeVersion = process.version;
const major = parseInt(nodeVersion.slice(1).split('.')[0]);

console.log('üìä Node.js version:', nodeVersion);
console.log('üìà Major version:', major);

if (major >= 18) {
  console.log('‚úÖ Node.js is current (18+)');
  console.log('‚úÖ ES2022 features available');
  console.log('‚úÖ Modern async/await support');
  console.log('‚úÖ Top-level await available');
  console.log('‚úÖ Optional chaining available');
  console.log('‚úÖ Nullish coalescing available');
} else if (major >= 16) {
  console.log('‚ö†Ô∏è Node.js is LTS but not latest');
} else {
  console.log('‚ùå Node.js version is outdated');
  process.exit(1);
}

// Test modern features availability
try {
  // Test fetch (Node 18+)
  if (typeof fetch !== 'undefined') {
    console.log('‚úÖ Built-in fetch available');
  } else {
    console.log('‚ö†Ô∏è Built-in fetch not available (Node < 18)');
  }
} catch (e) {
  console.log('‚ÑπÔ∏è Some modern features may not be available');
}
"

echo ""
echo "üéâ Modern Node.js setup completed!"
echo "‚úÖ Using current Node.js version"
echo "‚úÖ Latest npm and dependencies"
echo "‚úÖ Modern JavaScript features enabled"
echo "‚úÖ Firebase Functions with nodejs20 runtime"
echo "‚úÖ Performance optimized"
echo ""
echo "üöÄ Ready for modern development with Jules!"